%图像亮度精确控制的双直方图均衡算法_江巨浪

function [newPixelVal,validNum] = PixelMapping(hist ,dimImage)
    frequency = hist;
    accumulation = zeros(1,16384); %14bits位宽
    
    gray_sum = 0;
    pixel_count = 0;
    valide_total = 0;
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            gray_sum = gray_sum + frequency(i) * i;
            pixel_count = pixel_count + frequency(i);
            valide_total = valide_total +1;
        end
    end
    gray_average = gray_sum / pixel_count;
    fprintf("\n平均灰度 %d \n",gray_average);
    
    gray_mean = valide_total/2;
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            gray_mean = gray_mean - 1;
            if gray_mean <= 0
                gray_mean = i;
                break;
            end
        end
    end
    fprintf("\n中值灰度 %d \n",gray_mean);
    
    start_x = -1;
    end_x = 0;
    for  i = 1:length(frequency)
        if frequency(i) ~= 0
            if start_x == -1
                start_x = i;
            end
            end_x = i;
        end
    end
    fprintf("\n起始位置%d 结束位置%d \n",start_x ,end_x);
    
    draw2threshold = inf;
    
    for i = start_x+1 : end_x-1
        if frequency(i) == 0
            continue;
        end
        
       XT = i; 
       pl = 0;
       for m = start_x : XT
            if frequency(m) ~= 0
                pl = pl + frequency(m);
            end
       end
       pr = 0;
       for m = XT+1 : end_x
            if frequency(m) ~= 0
                pr = pr + frequency(m);
            end
       end
       X0 = 0;
       XL = 16384;
       EY = 1/pixel_count * pl *(X0 + XT)/2 + 1/pixel_count * pr *(XT + XL)/2;
       deltaY = EY - (gray_average + gray_mean) /2 ;
       if abs(deltaY) <= 100
           %候选点
           fprintf("deltaY= %d ,XT = %d \n",deltaY ,XT);
           draw2threshold = XT;
           break;
       end
    end
  
    fprintf("更新后阈值 %d \n" ,draw2threshold);
    index = draw2threshold;
    
    frequency = frequency /sum(frequency(:));
    E = 0;
    for i = 1 : length(frequency)
        E = E + i * frequency(i);
    end
    
    L = length(frequency);
    E = E / L;
    fprintf("\nE值（0.5） %.3f \n" ,E);
    
    alpha = 0;
    if E <= 0.5
        alpha = E;
    else
        alpha = 1-E;
    end
  
    h = hist;
    %最小值
    %minValue = min(h);
    minValue = Inf;
    for i = 1:index
        if h(i) ~= 0 && h(i) < minValue
            minValue = h(i);
        end
    end
    maxValue = max(h(1:index));
    
    hc = zeros(1,L);
    
    omiga1=1-index/L;
    omiga2=1;
    omiga3=1+index/L;
    for i = 1 : index
        if h(i) == 0
            continue;
        end
        val = (h(i)-minValue)/(maxValue -minValue);
        hc(i) = 1/3 *(val^(alpha * omiga1) +val^(alpha * omiga2) + val^(alpha * omiga3));
    end
    
    minValue = Inf;
    for i = index+1:length(h)
        if h(i) ~= 0 && h(i) < minValue
            minValue = h(i);
        end
    end
    maxValue = max(h(index+1:length(h)));
    
    omiga1=1-(L-index)/L;
    omiga2=1;
    omiga3=1+(L-index)/L;
    for i = index+1:length(h)
        if h(i) == 0
            continue;
        end
        val = (h(i)-minValue)/(maxValue -minValue);
        hc(i) = 1/3 *(val^(alpha * omiga1) +val^(alpha * omiga2) + val^(alpha * omiga3));
    end

    pc = zeros(1,L);
    sum_val= sum(hc(1:index));
    for i = 1 : index
        pc(i) = hc(i)/sum_val;
    end
    sum_val= sum(hc(index+1:L));
    for i = index+1 : L
        pc(i) = hc(i)/sum_val;
    end
    
    cc = zeros(1,L);
    cc(1,1) = pc(1);
    for i = 2 : index
        cc(i) = cc(i-1) + pc(i);
    end
    cc(1,index + 1) = pc(index + 1);
    for i = index + 2 : L
        cc(i) = cc(i-1) + pc(i);
    end
    
    f = zeros(1,L);
    for i = 1 : index
        f(i) = index * (cc(i) - 0.5*pc(i));
    end
    for i = index+1 : L
        f(i) = (index+1) + (L-index-2) * (cc(i) - 0.5*pc(i));
    end
    newPixelVal = uint8(round(round(f)/64.0));
    fprintf("done\n");
    
    frequency = hist;
    % 重新生成非无效元素的概率函数
    newFrequency = []; % 初始化新数组为空
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            newFrequency = [newFrequency, frequency(i)]; % 将不为0的元素添加到新数组
        end
    end
    % 图像的灰度级数
    validNum = length(newFrequency);
    
end


function filtered_data = mean_filter_1d(data, window_size)
    % 获取数据长度
    data_length = length(data);
    % 初始化滤波后的数据
    filtered_data = zeros(1, data_length);
    % 计算窗口半径（假设窗口大小为奇数）
    half_window = floor(window_size / 2);
    
    % 遍历数据进行滤波操作
    for i = 1:data_length
        % 用于存储窗口内数据的和
        sum_value = 0;
        % 确定当前元素对应的滤波窗口范围
        start_idx = max(1, i - half_window);
        end_idx = min(data_length, i + half_window);
        % 计算窗口内数据的和
        for j = start_idx:end_idx
            sum_value = sum_value + data(j);
        end
        % 计算窗口内数据的平均值，并赋值给滤波后的数据
        filtered_data(i) = sum_value / (end_idx - start_idx + 1);
    end
end
 