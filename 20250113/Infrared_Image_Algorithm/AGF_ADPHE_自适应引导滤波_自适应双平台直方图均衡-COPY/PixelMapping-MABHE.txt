%多尺度自校正双直方图均衡化红外图像增强

function [newPixelVal,validNum] = PixelMapping(hist ,dimImage)
    frequency = hist;
    accumulation = zeros(1,16384); %14bits位宽
    
   
    %黄金分割点
    frequency = frequency /sum(frequency(:));
    val = 0;
    index = 1;
    for i = 1 : length(frequency)
        val = val + frequency(i);
        if val >= 0.618
            index = i;
            break;
        end
    end
    fprintf("\n黄金分割点坐标 %d \n" ,index);
    
    E = 0;
    for i = 1 : length(frequency)
        E = E + i * frequency(i);
    end
    
    L = length(frequency);
    E = E / L;
    fprintf("\nE值（0.5） %.3f \n" ,E);
    
    alpha = 0;
    if E <= 0.5
        alpha = E;
    else
        alpha = 1-E;
    end
  
    h = hist;
    %最小值
    %minValue = min(h);
    minValue = Inf;
    for i = 1:index
        if h(i) ~= 0 && h(i) < minValue
            minValue = h(i);
        end
    end
    maxValue = max(h(1:index));
    
    hc = zeros(1,L);
    
    omiga1=1-index/L;
    omiga2=1;
    omiga3=1+index/L;
    for i = 1 : index
        if h(i) == 0
            continue;
        end
        val = (h(i)-minValue)/(maxValue -minValue);
        hc(i) = 1/3 *(val^(alpha * omiga1) +val^(alpha * omiga2) + val^(alpha * omiga3));
    end
    
    
    minValue = Inf;
    for i = index+1:length(h)
        if h(i) ~= 0 && h(i) < minValue
            minValue = h(i);
        end
    end
    maxValue = max(h(index+1:length(h)));
    
    omiga1=1-(L-index)/L;
    omiga2=1;
    omiga3=1+(L-index)/L;
    for i = index+1:length(h)
        if h(i) == 0
            continue;
        end
        val = (h(i)-minValue)/(maxValue -minValue);
        hc(i) = 1/3 *(val^(alpha * omiga1) +val^(alpha * omiga2) + val^(alpha * omiga3));
    end

    pc = zeros(1,L);
    sum_val= sum(hc(1:index));
    for i = 1 : index
        pc(i) = hc(i)/sum_val;
    end
    sum_val= sum(hc(index+1:L));
    for i = index+1 : L
        pc(i) = hc(i)/sum_val;
    end
    
    cc = zeros(1,L);
    cc(1,1) = pc(1);
    for i = 2 : index
        cc(i) = cc(i-1) + pc(i);
    end
    cc(1,index + 1) = pc(index + 1);
    for i = index + 2 : L
        cc(i) = cc(i-1) + pc(i);
    end
    
    f = zeros(1,L);
    for i = 1 : index
        f(i) = index * (cc(i) - 0.5*pc(i));
    end
    for i = index+1 : L
        f(i) = (index+1) + (L-index-2) * (cc(i) - 0.5*pc(i));
    end
    newPixelVal = uint8(round(round(f)/64.0));
    fprintf("done\n");
    
    frequency = hist;
    % 重新生成非无效元素的概率函数
    newFrequency = []; % 初始化新数组为空
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            newFrequency = [newFrequency, frequency(i)]; % 将不为0的元素添加到新数组
        end
    end
    % 图像的灰度级数
    validNum = length(newFrequency);
    
end
