function [newPixelVal,validNum] = PixelMapping(hist ,dimImage)
    frequency = hist;
    accumulation = zeros(1,16384); %14bits位宽
    
    %寻找最小值的候选点
     lowValleyQuency = [];
     lowValleyIndex = [];
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            lowValleyQuency = [lowValleyQuency, frequency(i)]; % 将不为0的元素添加到新数组
            lowValleyIndex = [lowValleyIndex ,i];
        end
    end

    %均值滤波处理
    filter_windows_size = 64;
    frequency_filtered = mean_filter_1d(lowValleyQuency, filter_windows_size);
    lowValleyQuency_filtered = round(frequency_filtered);

    index = 1;
    for i = 1:length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            frequency(i) = lowValleyQuency_filtered(index);
            index = index + 1;
        end
    end
    
    %搜索最小值
    n = 15;
    localValley = []; %存储局部最大值

    % POLAR因为窗口搜索失败的时候
  
    for i = 1:length(lowValleyQuency_filtered) - n + 1
        % 确定当前窗口内的数据
        window = lowValleyQuency_filtered(i:i + n - 1);
        % 获取窗口中间位置的索引（向下取整，确保为整数索引）
        middleIndex = floor(n / 2 + 1 / 2);

        % 判断窗口中间位置的元素是否是窗口内的最大值
        if window(middleIndex) == min(window) 
             localValley = [localValley ,lowValleyIndex(i+middleIndex-1)];
             fprintf(" %d " ,lowValleyIndex(i+middleIndex-1));
        end
    end
    fprintf("\n局部最小值 峰谷个数 %d \n" , length(localValley));
    
    %大津法寻找分割点
    max_variance = 0;
    best_threshold = 0;
    L = length(frequency);
    avg_all = 0;
    for m = 1:L
        if frequency(m) == 0
            continue;
        end
        avg_all = avg_all + m * frequency(m);
    end
    for t = 1:L - 1
        if frequency(t) == 0
            continue;
        end
        sum1 = 0;
        mu1 = 0;
        for m = 1:t
            if frequency(m) == 0
                continue;
            end
            sum1 = sum1 + frequency(m);
            mu1 = mu1 + m * frequency(m);
        end
        sum2 = 0;
        mu2 = 0;
        for m = t + 1:L
            if frequency(m) == 0
                continue;
            end
            sum2 = sum2 + frequency(m);
            mu2 = mu2 + m * frequency(m);
        end
        w0 = sum1 / (sum1+sum2);
        w1 = 1 - w0;
        
        variance = w0 * (mu1/sum1 - (avg_all / (sum1+sum2)))^2 + w1 * (mu2/sum2 - (avg_all / (sum1+sum2)))^2;
        if variance > max_variance
            max_variance = variance;
            best_threshold = t;
        end
    end
    fprintf("OSTU阈值 %d \n" ,best_threshold);
    
    %更新最新的二分阈值
    draw2threshold = 0;
    for i = 1:length(localValley)-1
        if best_threshold >= localValley(i) && best_threshold <= localValley(i+1)
            if best_threshold - localValley(i) < localValley(i+1) - best_threshold
                draw2threshold = localValley(i);
            else
                draw2threshold = localValley(i+1);
            end
            break;
        end
    end
    fprintf("更新OSTU阈值 %d \n" ,draw2threshold);
    if draw2threshold == 0
        draw2threshold = best_threshold;
    end
    fprintf("更新后OSTU阈值 %d \n" ,draw2threshold);
    
    %对背景做ADPHE
    % 重新生成非无效元素的概率函数
    newFrequency = []; % 初始化新数组为空
    for i = 1:draw2threshold
        if frequency(i) ~= 0 %是否不等于0
            newFrequency = [newFrequency, frequency(i)]; % 将不为0的元素添加到新数组
        end
    end

    %搜索POLAR峰值
    n = 9;% 窗口大小 5 9 15
    localPolar = zeros(1, length(newFrequency)); %存储局部最大值
    localPolar_idx = 1;
    
    % POLAR因为窗口搜索失败的时候
  
    for i = 1:length(newFrequency) - n + 1
        % 确定当前窗口内的数据
        window = newFrequency(i:i + n - 1);
        % 获取窗口中间位置的索引（向下取整，确保为整数索引）
        middleIndex = floor(n / 2 + 1 / 2);
        if  max(window) <= 20 
            continue;
        end
        % 判断窗口中间位置的元素是否是窗口内的最大值
        if window(middleIndex) == max(window) && window(middleIndex+1) ~= max(window) && window(middleIndex-1) ~= max(window)
             % 如果是最大值，
             localPolar(1,localPolar_idx) = max(window);
             fprintf('%d ', localPolar(1,localPolar_idx) );
             localPolar_idx = localPolar_idx+1;
        end
    end
    fprintf('\n');
    disp("背景 Polar峰值个数 " + localPolar_idx);
    %localPolar
    
    %TODO 全增强处理
    
    % 设置上平台值
    T_up = sum(localPolar)/(localPolar_idx-1);
    
    % 设置下平台值
    T_down_a = dimImage(1)*dimImage(2) / 16384.0;
    T_down_b = T_up *length(newFrequency) / 16384.0;
    T_down_c = length(newFrequency)/ 256.0; %华中科大的下平台阈值计算方法
    T_down = min(T_down_b,T_down_c);
    
    disp("背景 上平台值 up_limit = " + T_up);
    %fprintf("%f %f %f ",T_down_a ,T_down_b,T_down_c); %打印下平台值
    disp("背景 下平台值 down_limit = " + T_down);
    
    % 整形化
    T_up_uint = round(T_up);
    T_down_uint = round(T_down);
    
    %修改概率密度函数
    for i = 1:draw2threshold
        if frequency(i) ~= 0
            if frequency(i) > T_up_uint
                frequency(i) = T_up_uint;
            elseif frequency(i) < T_down_uint
                frequency(i) = T_down_uint;
            end
        end
    end
    
    %对前景做ADPHE
    % 重新生成非无效元素的概率函数
    newFrequency = []; % 初始化新数组为空
    for i = draw2threshold + 1: length(frequency)
        if frequency(i) ~= 0 %是否不等于0
            newFrequency = [newFrequency, frequency(i)]; % 将不为0的元素添加到新数组
        end
    end
    
    %搜索POLAR峰值
    n = 9;% 窗口大小 5 9 15
    localPolar = zeros(1, length(newFrequency)); %存储局部最大值
    localPolar_idx = 1;
    
    % POLAR因为窗口搜索失败的时候
  
    for i = 1:length(newFrequency) - n + 1
        % 确定当前窗口内的数据
        window = newFrequency(i:i + n - 1);
        % 获取窗口中间位置的索引（向下取整，确保为整数索引）
        middleIndex = floor(n / 2 + 1 / 2);
        if  max(window) <= 20 
            continue;
        end
        % 判断窗口中间位置的元素是否是窗口内的最大值
        if window(middleIndex) == max(window) && window(middleIndex+1) ~= max(window) && window(middleIndex-1) ~= max(window)
             % 如果是最大值，
             localPolar(1,localPolar_idx) = max(window);
             fprintf('%d ', localPolar(1,localPolar_idx) );
             localPolar_idx = localPolar_idx+1;
        end
    end
    fprintf('\n');
    disp("前景 Polar峰值个数 " + localPolar_idx);
    %localPolar
    
    %TODO 全增强处理
    
    % 设置上平台值
    T_up = sum(localPolar)/(localPolar_idx-1);
    
    % 设置下平台值
    T_down_a = dimImage(1)*dimImage(2) / 16384.0;
    T_down_b = T_up *length(newFrequency) / 16384.0;
    T_down_c = length(newFrequency)/ 256.0; %华中科大的下平台阈值计算方法
    T_down = min(T_down_b,T_down_c);
    
    disp("前景 上平台值 up_limit = " + T_up);
    %fprintf("%f %f %f ",T_down_a ,T_down_b,T_down_c); %打印下平台值
    disp("前景 下平台值 down_limit = " + T_down);
    
    % 整形化
    T_up_uint = round(T_up);
    T_down_uint = round(T_down);
    
    %修改概率密度函数
    for i = draw2threshold + 1: length(frequency)
        if frequency(i) ~= 0
            if frequency(i) > T_up_uint
                frequency(i) = T_up_uint;
            elseif frequency(i) < T_down_uint
                frequency(i) = T_down_uint;
            end
        end
    end
    
    %统计总灰度
    gray_level_total = 0;
    max_gray_level = 0;
    min_gray_level = length(frequency);
    for i = 1:length(frequency)
        if frequency(i) == 0
           continue; 
        end
        if min_gray_level > i
            min_gray_level = i;
        end
        if max_gray_level < i
            max_gray_level = i;
        end
        gray_level_total = gray_level_total + 1;
    end
    t1 = 0;
    for i = 1:draw2threshold
        if frequency(i) == 0
           continue; 
        end
        t1 = t1 + 1;
    end
    t2 = 0;
    for i = draw2threshold+1:length(frequency)
        if frequency(i) == 0
           continue; 
        end
        t2 = t2 + 1;
    end
    
    % 图像的灰度级数
    validNum = length(newFrequency);
    fprintf("灰度级数 %d \n" ,validNum);
    
    % 更新背景的概率密度
    accumulation(1,1)=frequency(1,1);
    for i = 2:draw2threshold
        accumulation(1,i) = accumulation(1,i-1) + frequency(1,i);
    end
    max_val = accumulation(1,draw2threshold);
    for i = 1:draw2threshold
        accumulation(1,i) = accumulation(1,i) / max_val;
    end
    
     % 更新前景的概率密度
    accumulation(1,draw2threshold + 1)=frequency(1,draw2threshold + 1);
    for i = draw2threshold + 2:length(frequency)
        accumulation(1,i) = accumulation(1,i-1) + frequency(1,i);
    end
    max_val = accumulation(1,length(frequency));
    for i = draw2threshold+1:length(frequency)
        accumulation(1,i) = accumulation(1,i) / max_val;
    end
    
    %处理有效灰度集数
    base_threshold = 0;
    if validNum < 255
        base_threshold = floor((255 - validNum)/2.0);
    end
    
    %更新权重
    t1 = t1 ; % 0.75  0.8
    t2 = t2;
    gray_level_total = t1 + t2;
    
    %更新背景的灰度区间
    top_normal_distribution_val = 255.0;
    threhold_normal_distribution_val = 0.0;
    for i = 1:draw2threshold
        %accumulation(1,i) = accumulation(1,i) * t1 / gray_level_total *(255.0-2.0*base_threshold) + base_threshold;
        
        accumulation(1,i) = accumulation(1,i) * t1 / gray_level_total *(top_normal_distribution_val + threhold_normal_distribution_val) - threhold_normal_distribution_val;
        accumulation(1,i) = max(0,accumulation(1,i));
        accumulation(1,i) = min(255,accumulation(1,i));
        
    end
    
    %更新前景的灰度区间
     for i = draw2threshold+1:length(frequency)
        accumulation(1,i) = (accumulation(1,i) * t2 + t1) / gray_level_total * (255.0-2.0*base_threshold) + base_threshold;
        %accumulation(1,i) = 0;
     end
     
     %二值图
%      for i = 1:length(frequency)
%         if i < best_threshold
%             accumulation(1,i) = 0;
%         else
%             accumulation(1,i) = 255;
%         end
%     end
     

    accumulation(1,:) = round(accumulation(1,:));
    newPixelVal = uint8(accumulation );
    
end


function filtered_data = mean_filter_1d(data, window_size)
    % 获取数据长度
    data_length = length(data);
    % 初始化滤波后的数据
    filtered_data = zeros(1, data_length);
    % 计算窗口半径（假设窗口大小为奇数）
    half_window = floor(window_size / 2);
    
    % 遍历数据进行滤波操作
    for i = 1:data_length
        % 用于存储窗口内数据的和
        sum_value = 0;
        % 确定当前元素对应的滤波窗口范围
        start_idx = max(1, i - half_window);
        end_idx = min(data_length, i + half_window);
        % 计算窗口内数据的和
        for j = start_idx:end_idx
            sum_value = sum_value + data(j);
        end
        % 计算窗口内数据的平均值，并赋值给滤波后的数据
        filtered_data(i) = sum_value / (end_idx - start_idx + 1);
    end
end
 