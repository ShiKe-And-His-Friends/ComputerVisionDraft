#include <iostream>
#include <fstream>
#include <cmath> 
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;

#define SAMPLE_NUMS 43
#define MAX(a,b)  ((a) < (b) ? (b) : (a))
#define MIN(a,b)  ((a) > (b) ? (b) : (a))

static void WeightedFitLineWods(const Point2f * points, int count, float * weights, float * line) {
	double x = 0, y = 0, x2 = 0, y2 = 0, xy = 0, w = 0;
	double dx2, dy2, dxy;
	int i;
	float t;

	//计算x和y的均值
	if (weights == 0)
	{
		for (i = 0; i < count; i += 1)
		{
			x += points[i].x;
			y += points[i].y;
			x2 += points[i].x * points[i].x;
			y2 += points[i].y * points[i].y;
			xy += points[i].x * points[i].y;
		}
		w = (float)count;
	}
	else
	{
		for (i = 0; i < count; i += 1)
		{
			x += weights[i] * points[i].x;
			y += weights[i] * points[i].y;
			x2 += weights[i] * points[i].x * points[i].x;
			y2 += weights[i] * points[i].y * points[i].y;
			xy += weights[i] * points[i].x * points[i].y;
			w += weights[i];
		}
	}
	x /= w;
	y /= w;
	x2 /= w;
	y2 /= w;
	xy /= w;

	dx2 = x2 - x * x;
	dy2 = y2 - y * y;
	dxy = xy - x * y;
	t = (float)atan2(2 * dxy, dx2 - dy2) / 2;
	line[0] = (float)cos(t);
	line[1] = (float)sin(t);

	line[2] = (float)x;
	line[3] = (float)y;

}

//计算距离误差
static double calcDist2D(const Point2f * points, int count, float * _line, float * dist) {
	int j;
	float px = _line[2], py = _line[3];
	float nx = _line[1], ny = -_line[0];
	double sum_dist = 0.;

	for (j = 0; j < count; j++)
	{
		float x, y;

		x = points[j].x - px;
		y = points[j].y - py;

		dist[j] = (float)fabs(nx * x + ny * y);
		sum_dist += dist[j];
	}
	return sum_dist;
}

static void weightL1(float * d ,int count ,float * w) {
	int i;
	for (i = 0; i < count; i++) {
		double t = fabs((double)d[i]);
		w[i] = (float)(1. / MAX(t ,1e-6));
	}
}

//加权最小二乘法的直线拟合
int WeightedFitLine(std::vector<Point2f> datas) {
	
	//TODO 格式float
	Point2f* point_ = &datas[0];

	//TODO 设置数据数量43个
	int count = SAMPLE_NUMS;
	
	//设置浮点计算误差
	double EPS = count * FLT_EPSILON;
	//设置权重计算函数
	void(* calc_weights)(float * ,int ,float *) = 0;
	//设置权重参数
	void(* calc_weights_param)(float * ,int ,float * ,float) = 0;
	//拟合结果的直线参数
	float line[6] = { 0.0f };
	memset(&line, 0, 4 * sizeof(line[0]));
	float _line[4],_lineprev[4];
	//设置直径reps参数
	float rdelta = 0.01f;
	//设置角度aeps参数
	float adelta = 0.01f;
	//设置拟合误差
	double min_err = DBL_MAX, err = 0;
	//设置随机种子
	RNG rng((uint64)-1);
	
	int i, j, k;

	//选择拟合方法
	calc_weights = weightL1;

	//TODO 使用AutoBuffer分配内存
	float wr[SAMPLE_NUMS * 2] = {0.0f};
	memset(&wr, 0, SAMPLE_NUMS * 2 * sizeof(float));
	float * w = &wr[0] ,* r = w + SAMPLE_NUMS;

	for (k = 0; k < 20; k++) {
		int first = 1;
		for (i = 0; i < count; i++) {
			w[i] = 0.0f;
		}

		for (i = 0; i < MIN(count, 10);) {
			j = rng.uniform(0 ,count);
			if (w[j] < FLT_EPSILON) {
				w[j] = 1.0f;
				i++;
			}
		}

		WeightedFitLineWods(point_ ,count ,w ,_line);
		for (i = 0; i < 30;i++) {
			double sum_w = 0;
			if (first) {
				first = 0;
			}
			else {
				double t = _line[0] * _lineprev[0] + _line[1] * _lineprev[1];
				t = MAX(t, -1.);
				t = MIN(t, 1.);
				if (fabs(acos(t)) < adelta)
				{
					float x, y, d;

					x = (float)fabs(_line[2] - _lineprev[2]);
					y = (float)fabs(_line[3] - _lineprev[3]);

					d = x > y ? x : y;
					if (d < rdelta) {
						break;
					}
					
				}
			}
			//计算距离误差
			err = calcDist2D(point_,count ,_line ,r);
			if (err < min_err) {
				memcpy(line, _line, 4 * sizeof(line[0]));
				if (err < EPS)
					break;
			}

			//计算权重
			if (calc_weights) {
				calc_weights(r ,count ,w);
			}
			else {
				//高级距离权重的方法
				//calc_weights_param(r, count, w, _param);
			}
			for (j = 0; j < count; j++) {
				sum_w += w[j];
			}
			if (fabs(sum_w) >FLT_EPSILON) {
				sum_w = 1. / sum_w;
				for (j = 0; j < count; j++) {
					w[j] = (float)(w[j] * sum_w);
				}
			}
			else {
				for (j = 0; j < count;j++) {
					w[j] = 1.0f;
				}
			}
			//保存直线的参数
			memcpy(_lineprev, _line, 4 * sizeof(float));
			//重新运行一遍
			WeightedFitLineWods(point_, count, w, _line);
		}

		if (err < min_err) {
			min_err = err;
			memcpy(line ,_line ,4 * sizeof(line[0]));
			if (err < EPS) {
				break;
			}
		}
	}

	//显示加权拟合的结果
	double slope_k = line[1] / line[0];

	double fit_error = 0;
	for (int i = 0; i < count; i++) {
		fit_error += std::fabs(datas[i].y - (line[3] + slope_k * (datas[i].x - line[2])));
	}

	// 输出拟合结果
	std::cout << std::setprecision(6) << "Line slope: " << slope_k << std::endl;
	std::cout << "Line direction: " << line[0] << ", " << line[1] << std::endl;
	std::cout << "Line point: " << line[2] << ", " << line[3] << std::endl;
	std::cout << "Fit error: " << fit_error << std::endl;
	std::cout << "#################### " << std::endl;

	return 0;
}

//int line_fit_test() {
int main(){

	const int data_size = 43;

	//拟合数据
	//x
	double d_miu_datas[data_size] = { 3777.099 ,3691.785 ,3612.056 ,3526.813 ,3440.423 ,3355.454 ,3270.021 ,3182.801 ,3095.773 ,3008.509 ,2920.522 ,2829.507 ,2739.887 ,2649.224 ,2556.293 ,2462.194 ,2364.462 ,2265.033 ,2163.195 ,2060.333 ,1963.325 ,1872.698 ,1786.836 ,1702.399 ,1618.025 ,1535.435 ,1453.153 ,1370.184 ,1287.457 ,1204.132 ,1121.338 ,1038.475 ,956.267 ,874.542 ,792.742 ,711.505 ,630.175 ,548.400 ,465.866 ,381.526 ,294.619 ,203.081 ,106.242 };
	
	//y
	double d_sigme2_datas[data_size] = { 3814.606 ,3745.218 ,3665.824 ,3579.292 ,3496.945 ,3412.104 ,3330.350 ,3255.373 ,3203.751 ,3183.965 ,3214.170 ,3281.141 ,3346.119 ,3378.029 ,3366.171 ,3342.413 ,3374.639 ,3452.341 ,3419.313 ,3086.285 ,2567.113 ,2164.830 ,1965.986 ,1856.773 ,1751.567 ,1654.703 ,1563.693 ,1477.362 ,1394.849 ,1309.922 ,1221.042 ,1121.096 ,1016.523 ,925.414 ,832.535 ,741.451 ,649.705 ,557.951 ,466.428 ,372.836 ,281.767 ,189.135 ,96.138 };
	
	std::vector<cv::Point2f> datas;
	for (int i = 0; i < data_size; i++) {
		datas.push_back(cv::Point2f(d_miu_datas[i], d_sigme2_datas[i]));
	}

	cv::Vec4f line;
	cv::fitLine(datas ,line , cv::DIST_L1,0 ,0.01 ,0.01);
	//! Crash
	double k = line(1) / line(0);

	double fit_error = 0;
	for (int i = 0; i < data_size; i++) {
		fit_error += std::fabs(d_sigme2_datas[i] - (line(3) + k * (d_miu_datas[i] - line(2))));
	}

	// 输出拟合结果
	std::cout << std::setprecision(6) << "Line slope: "  << k << std::endl;
	std::cout << "Line direction: " << line(0) << ", " << line(1) << std::endl;
	std::cout << "Line point: " << line(2) << ", " << line(3) << std::endl;
	std::cout << "Fit error: " << fit_error << std::endl;
	std::cout << "#################### " << std::endl;

	// 按excel的公式计算斜率
	double mean_X = 0, mean_Y = 0;
	for (int i = 0; i < data_size; i++) {
		mean_X += d_miu_datas[i];
		mean_Y += d_sigme2_datas[i];
	}
	mean_X /= data_size;
	mean_Y /= data_size;

	double b1 = 0 ,b2 = 0;
	for (int i = 0; i < data_size; i++) {
		b1 += (d_miu_datas[i] - mean_X)* (d_sigme2_datas[i] - mean_Y);
		b2 += (d_miu_datas[i] - mean_X) * (d_miu_datas[i] - mean_X);
	}
	double slope_excel = b1 / b2;

	fit_error = 0;
	for (int i = 0; i < data_size; i++) {
		fit_error += std::fabs(d_sigme2_datas[i] - (mean_Y + slope_excel * (d_miu_datas[i] - mean_X)));
	}
	
	std::cout << std::setprecision(6) << "Excel line slope: " << slope_excel << std::endl;
	std::cout << "Line mean point: " << mean_X << ", " << mean_Y << std::endl;
	std::cout << "Fit error: " << fit_error << std::endl;
	std::cout << "#################### " << std::endl;

	//自定义加权最小二乘法
	WeightedFitLine(datas);

	return 0;
}